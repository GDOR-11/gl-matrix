import { expect, describe, it, beforeEach } from 'vitest';
import { Vec4 } from "../src/vec4"
import "./test-utils"

describe("Vec4 Swizzles", () => {
  let v: Vec4;
  beforeEach(() => { v = new Vec4(1, 2, 3); });

  // The contents of the following section are autogenerated by scripts/gen-swizzle.js and should
  // not be modified by hand.
  // [Swizzle Autogen]


  describe("Vec4().xx", () => {
    it("should return Vec2(x, x)", () => {
      expect(v.xx).toBeVec(v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xy", () => {
    it("should return Vec2(x, y)", () => {
      expect(v.xy).toBeVec(v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xz", () => {
    it("should return Vec2(x, z)", () => {
      expect(v.xz).toBeVec(v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xw", () => {
    it("should return Vec2(x, w)", () => {
      expect(v.xw).toBeVec(v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yx", () => {
    it("should return Vec2(y, x)", () => {
      expect(v.yx).toBeVec(v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yy", () => {
    it("should return Vec2(y, y)", () => {
      expect(v.yy).toBeVec(v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yz", () => {
    it("should return Vec2(y, z)", () => {
      expect(v.yz).toBeVec(v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yw", () => {
    it("should return Vec2(y, w)", () => {
      expect(v.yw).toBeVec(v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zx", () => {
    it("should return Vec2(z, x)", () => {
      expect(v.zx).toBeVec(v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zy", () => {
    it("should return Vec2(z, y)", () => {
      expect(v.zy).toBeVec(v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zz", () => {
    it("should return Vec2(z, z)", () => {
      expect(v.zz).toBeVec(v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zw", () => {
    it("should return Vec2(z, w)", () => {
      expect(v.zw).toBeVec(v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wx", () => {
    it("should return Vec2(w, x)", () => {
      expect(v.wx).toBeVec(v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wy", () => {
    it("should return Vec2(w, y)", () => {
      expect(v.wy).toBeVec(v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wz", () => {
    it("should return Vec2(w, z)", () => {
      expect(v.wz).toBeVec(v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ww", () => {
    it("should return Vec2(w, w)", () => {
      expect(v.ww).toBeVec(v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.ww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxx", () => {
    it("should return Vec3(x, x, x)", () => {
      expect(v.xxx).toBeVec(v[0], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxy", () => {
    it("should return Vec3(x, x, y)", () => {
      expect(v.xxy).toBeVec(v[0], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxz", () => {
    it("should return Vec3(x, x, z)", () => {
      expect(v.xxz).toBeVec(v[0], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxw", () => {
    it("should return Vec3(x, x, w)", () => {
      expect(v.xxw).toBeVec(v[0], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyx", () => {
    it("should return Vec3(x, y, x)", () => {
      expect(v.xyx).toBeVec(v[0], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyy", () => {
    it("should return Vec3(x, y, y)", () => {
      expect(v.xyy).toBeVec(v[0], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyz", () => {
    it("should return Vec3(x, y, z)", () => {
      expect(v.xyz).toBeVec(v[0], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyw", () => {
    it("should return Vec3(x, y, w)", () => {
      expect(v.xyw).toBeVec(v[0], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzx", () => {
    it("should return Vec3(x, z, x)", () => {
      expect(v.xzx).toBeVec(v[0], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzy", () => {
    it("should return Vec3(x, z, y)", () => {
      expect(v.xzy).toBeVec(v[0], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzz", () => {
    it("should return Vec3(x, z, z)", () => {
      expect(v.xzz).toBeVec(v[0], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzw", () => {
    it("should return Vec3(x, z, w)", () => {
      expect(v.xzw).toBeVec(v[0], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwx", () => {
    it("should return Vec3(x, w, x)", () => {
      expect(v.xwx).toBeVec(v[0], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwy", () => {
    it("should return Vec3(x, w, y)", () => {
      expect(v.xwy).toBeVec(v[0], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwz", () => {
    it("should return Vec3(x, w, z)", () => {
      expect(v.xwz).toBeVec(v[0], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xww", () => {
    it("should return Vec3(x, w, w)", () => {
      expect(v.xww).toBeVec(v[0], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxx", () => {
    it("should return Vec3(y, x, x)", () => {
      expect(v.yxx).toBeVec(v[1], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxy", () => {
    it("should return Vec3(y, x, y)", () => {
      expect(v.yxy).toBeVec(v[1], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxz", () => {
    it("should return Vec3(y, x, z)", () => {
      expect(v.yxz).toBeVec(v[1], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxw", () => {
    it("should return Vec3(y, x, w)", () => {
      expect(v.yxw).toBeVec(v[1], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyx", () => {
    it("should return Vec3(y, y, x)", () => {
      expect(v.yyx).toBeVec(v[1], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyy", () => {
    it("should return Vec3(y, y, y)", () => {
      expect(v.yyy).toBeVec(v[1], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyz", () => {
    it("should return Vec3(y, y, z)", () => {
      expect(v.yyz).toBeVec(v[1], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyw", () => {
    it("should return Vec3(y, y, w)", () => {
      expect(v.yyw).toBeVec(v[1], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzx", () => {
    it("should return Vec3(y, z, x)", () => {
      expect(v.yzx).toBeVec(v[1], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzy", () => {
    it("should return Vec3(y, z, y)", () => {
      expect(v.yzy).toBeVec(v[1], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzz", () => {
    it("should return Vec3(y, z, z)", () => {
      expect(v.yzz).toBeVec(v[1], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzw", () => {
    it("should return Vec3(y, z, w)", () => {
      expect(v.yzw).toBeVec(v[1], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywx", () => {
    it("should return Vec3(y, w, x)", () => {
      expect(v.ywx).toBeVec(v[1], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.ywx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywy", () => {
    it("should return Vec3(y, w, y)", () => {
      expect(v.ywy).toBeVec(v[1], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.ywy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywz", () => {
    it("should return Vec3(y, w, z)", () => {
      expect(v.ywz).toBeVec(v[1], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.ywz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yww", () => {
    it("should return Vec3(y, w, w)", () => {
      expect(v.yww).toBeVec(v[1], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxx", () => {
    it("should return Vec3(z, x, x)", () => {
      expect(v.zxx).toBeVec(v[2], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxy", () => {
    it("should return Vec3(z, x, y)", () => {
      expect(v.zxy).toBeVec(v[2], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxz", () => {
    it("should return Vec3(z, x, z)", () => {
      expect(v.zxz).toBeVec(v[2], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxw", () => {
    it("should return Vec3(z, x, w)", () => {
      expect(v.zxw).toBeVec(v[2], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyx", () => {
    it("should return Vec3(z, y, x)", () => {
      expect(v.zyx).toBeVec(v[2], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyy", () => {
    it("should return Vec3(z, y, y)", () => {
      expect(v.zyy).toBeVec(v[2], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyz", () => {
    it("should return Vec3(z, y, z)", () => {
      expect(v.zyz).toBeVec(v[2], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyw", () => {
    it("should return Vec3(z, y, w)", () => {
      expect(v.zyw).toBeVec(v[2], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzx", () => {
    it("should return Vec3(z, z, x)", () => {
      expect(v.zzx).toBeVec(v[2], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzy", () => {
    it("should return Vec3(z, z, y)", () => {
      expect(v.zzy).toBeVec(v[2], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzz", () => {
    it("should return Vec3(z, z, z)", () => {
      expect(v.zzz).toBeVec(v[2], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzw", () => {
    it("should return Vec3(z, z, w)", () => {
      expect(v.zzw).toBeVec(v[2], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwx", () => {
    it("should return Vec3(z, w, x)", () => {
      expect(v.zwx).toBeVec(v[2], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwy", () => {
    it("should return Vec3(z, w, y)", () => {
      expect(v.zwy).toBeVec(v[2], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwz", () => {
    it("should return Vec3(z, w, z)", () => {
      expect(v.zwz).toBeVec(v[2], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zww", () => {
    it("should return Vec3(z, w, w)", () => {
      expect(v.zww).toBeVec(v[2], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxx", () => {
    it("should return Vec3(w, x, x)", () => {
      expect(v.wxx).toBeVec(v[3], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxy", () => {
    it("should return Vec3(w, x, y)", () => {
      expect(v.wxy).toBeVec(v[3], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxz", () => {
    it("should return Vec3(w, x, z)", () => {
      expect(v.wxz).toBeVec(v[3], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxw", () => {
    it("should return Vec3(w, x, w)", () => {
      expect(v.wxw).toBeVec(v[3], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyx", () => {
    it("should return Vec3(w, y, x)", () => {
      expect(v.wyx).toBeVec(v[3], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyy", () => {
    it("should return Vec3(w, y, y)", () => {
      expect(v.wyy).toBeVec(v[3], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyz", () => {
    it("should return Vec3(w, y, z)", () => {
      expect(v.wyz).toBeVec(v[3], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyw", () => {
    it("should return Vec3(w, y, w)", () => {
      expect(v.wyw).toBeVec(v[3], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzx", () => {
    it("should return Vec3(w, z, x)", () => {
      expect(v.wzx).toBeVec(v[3], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzy", () => {
    it("should return Vec3(w, z, y)", () => {
      expect(v.wzy).toBeVec(v[3], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzz", () => {
    it("should return Vec3(w, z, z)", () => {
      expect(v.wzz).toBeVec(v[3], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzw", () => {
    it("should return Vec3(w, z, w)", () => {
      expect(v.wzw).toBeVec(v[3], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwx", () => {
    it("should return Vec3(w, w, x)", () => {
      expect(v.wwx).toBeVec(v[3], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwy", () => {
    it("should return Vec3(w, w, y)", () => {
      expect(v.wwy).toBeVec(v[3], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwz", () => {
    it("should return Vec3(w, w, z)", () => {
      expect(v.wwz).toBeVec(v[3], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().www", () => {
    it("should return Vec3(w, w, w)", () => {
      expect(v.www).toBeVec(v[3], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.www;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxxx", () => {
    it("should return Vec4(x, x, x, x)", () => {
      expect(v.xxxx).toBeVec(v[0], v[0], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xxxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxxy", () => {
    it("should return Vec4(x, x, x, y)", () => {
      expect(v.xxxy).toBeVec(v[0], v[0], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xxxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxxz", () => {
    it("should return Vec4(x, x, x, z)", () => {
      expect(v.xxxz).toBeVec(v[0], v[0], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xxxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxxw", () => {
    it("should return Vec4(x, x, x, w)", () => {
      expect(v.xxxw).toBeVec(v[0], v[0], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xxxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxyx", () => {
    it("should return Vec4(x, x, y, x)", () => {
      expect(v.xxyx).toBeVec(v[0], v[0], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xxyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxyy", () => {
    it("should return Vec4(x, x, y, y)", () => {
      expect(v.xxyy).toBeVec(v[0], v[0], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xxyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxyz", () => {
    it("should return Vec4(x, x, y, z)", () => {
      expect(v.xxyz).toBeVec(v[0], v[0], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xxyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxyw", () => {
    it("should return Vec4(x, x, y, w)", () => {
      expect(v.xxyw).toBeVec(v[0], v[0], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xxyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxzx", () => {
    it("should return Vec4(x, x, z, x)", () => {
      expect(v.xxzx).toBeVec(v[0], v[0], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xxzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxzy", () => {
    it("should return Vec4(x, x, z, y)", () => {
      expect(v.xxzy).toBeVec(v[0], v[0], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xxzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxzz", () => {
    it("should return Vec4(x, x, z, z)", () => {
      expect(v.xxzz).toBeVec(v[0], v[0], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xxzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxzw", () => {
    it("should return Vec4(x, x, z, w)", () => {
      expect(v.xxzw).toBeVec(v[0], v[0], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xxzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxwx", () => {
    it("should return Vec4(x, x, w, x)", () => {
      expect(v.xxwx).toBeVec(v[0], v[0], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xxwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxwy", () => {
    it("should return Vec4(x, x, w, y)", () => {
      expect(v.xxwy).toBeVec(v[0], v[0], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xxwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxwz", () => {
    it("should return Vec4(x, x, w, z)", () => {
      expect(v.xxwz).toBeVec(v[0], v[0], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xxwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xxww", () => {
    it("should return Vec4(x, x, w, w)", () => {
      expect(v.xxww).toBeVec(v[0], v[0], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xxww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyxx", () => {
    it("should return Vec4(x, y, x, x)", () => {
      expect(v.xyxx).toBeVec(v[0], v[1], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xyxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyxy", () => {
    it("should return Vec4(x, y, x, y)", () => {
      expect(v.xyxy).toBeVec(v[0], v[1], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xyxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyxz", () => {
    it("should return Vec4(x, y, x, z)", () => {
      expect(v.xyxz).toBeVec(v[0], v[1], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xyxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyxw", () => {
    it("should return Vec4(x, y, x, w)", () => {
      expect(v.xyxw).toBeVec(v[0], v[1], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xyxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyyx", () => {
    it("should return Vec4(x, y, y, x)", () => {
      expect(v.xyyx).toBeVec(v[0], v[1], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xyyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyyy", () => {
    it("should return Vec4(x, y, y, y)", () => {
      expect(v.xyyy).toBeVec(v[0], v[1], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xyyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyyz", () => {
    it("should return Vec4(x, y, y, z)", () => {
      expect(v.xyyz).toBeVec(v[0], v[1], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xyyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyyw", () => {
    it("should return Vec4(x, y, y, w)", () => {
      expect(v.xyyw).toBeVec(v[0], v[1], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xyyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyzx", () => {
    it("should return Vec4(x, y, z, x)", () => {
      expect(v.xyzx).toBeVec(v[0], v[1], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xyzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyzy", () => {
    it("should return Vec4(x, y, z, y)", () => {
      expect(v.xyzy).toBeVec(v[0], v[1], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xyzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyzz", () => {
    it("should return Vec4(x, y, z, z)", () => {
      expect(v.xyzz).toBeVec(v[0], v[1], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xyzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyzw", () => {
    it("should return Vec4(x, y, z, w)", () => {
      expect(v.xyzw).toBeVec(v[0], v[1], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xyzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xywx", () => {
    it("should return Vec4(x, y, w, x)", () => {
      expect(v.xywx).toBeVec(v[0], v[1], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xywx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xywy", () => {
    it("should return Vec4(x, y, w, y)", () => {
      expect(v.xywy).toBeVec(v[0], v[1], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xywy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xywz", () => {
    it("should return Vec4(x, y, w, z)", () => {
      expect(v.xywz).toBeVec(v[0], v[1], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xywz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xyww", () => {
    it("should return Vec4(x, y, w, w)", () => {
      expect(v.xyww).toBeVec(v[0], v[1], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xyww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzxx", () => {
    it("should return Vec4(x, z, x, x)", () => {
      expect(v.xzxx).toBeVec(v[0], v[2], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xzxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzxy", () => {
    it("should return Vec4(x, z, x, y)", () => {
      expect(v.xzxy).toBeVec(v[0], v[2], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xzxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzxz", () => {
    it("should return Vec4(x, z, x, z)", () => {
      expect(v.xzxz).toBeVec(v[0], v[2], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xzxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzxw", () => {
    it("should return Vec4(x, z, x, w)", () => {
      expect(v.xzxw).toBeVec(v[0], v[2], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xzxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzyx", () => {
    it("should return Vec4(x, z, y, x)", () => {
      expect(v.xzyx).toBeVec(v[0], v[2], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xzyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzyy", () => {
    it("should return Vec4(x, z, y, y)", () => {
      expect(v.xzyy).toBeVec(v[0], v[2], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xzyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzyz", () => {
    it("should return Vec4(x, z, y, z)", () => {
      expect(v.xzyz).toBeVec(v[0], v[2], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xzyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzyw", () => {
    it("should return Vec4(x, z, y, w)", () => {
      expect(v.xzyw).toBeVec(v[0], v[2], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xzyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzzx", () => {
    it("should return Vec4(x, z, z, x)", () => {
      expect(v.xzzx).toBeVec(v[0], v[2], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xzzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzzy", () => {
    it("should return Vec4(x, z, z, y)", () => {
      expect(v.xzzy).toBeVec(v[0], v[2], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xzzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzzz", () => {
    it("should return Vec4(x, z, z, z)", () => {
      expect(v.xzzz).toBeVec(v[0], v[2], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xzzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzzw", () => {
    it("should return Vec4(x, z, z, w)", () => {
      expect(v.xzzw).toBeVec(v[0], v[2], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xzzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzwx", () => {
    it("should return Vec4(x, z, w, x)", () => {
      expect(v.xzwx).toBeVec(v[0], v[2], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xzwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzwy", () => {
    it("should return Vec4(x, z, w, y)", () => {
      expect(v.xzwy).toBeVec(v[0], v[2], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xzwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzwz", () => {
    it("should return Vec4(x, z, w, z)", () => {
      expect(v.xzwz).toBeVec(v[0], v[2], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xzwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xzww", () => {
    it("should return Vec4(x, z, w, w)", () => {
      expect(v.xzww).toBeVec(v[0], v[2], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xzww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwxx", () => {
    it("should return Vec4(x, w, x, x)", () => {
      expect(v.xwxx).toBeVec(v[0], v[3], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xwxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwxy", () => {
    it("should return Vec4(x, w, x, y)", () => {
      expect(v.xwxy).toBeVec(v[0], v[3], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xwxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwxz", () => {
    it("should return Vec4(x, w, x, z)", () => {
      expect(v.xwxz).toBeVec(v[0], v[3], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xwxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwxw", () => {
    it("should return Vec4(x, w, x, w)", () => {
      expect(v.xwxw).toBeVec(v[0], v[3], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xwxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwyx", () => {
    it("should return Vec4(x, w, y, x)", () => {
      expect(v.xwyx).toBeVec(v[0], v[3], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xwyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwyy", () => {
    it("should return Vec4(x, w, y, y)", () => {
      expect(v.xwyy).toBeVec(v[0], v[3], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xwyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwyz", () => {
    it("should return Vec4(x, w, y, z)", () => {
      expect(v.xwyz).toBeVec(v[0], v[3], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xwyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwyw", () => {
    it("should return Vec4(x, w, y, w)", () => {
      expect(v.xwyw).toBeVec(v[0], v[3], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xwyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwzx", () => {
    it("should return Vec4(x, w, z, x)", () => {
      expect(v.xwzx).toBeVec(v[0], v[3], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xwzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwzy", () => {
    it("should return Vec4(x, w, z, y)", () => {
      expect(v.xwzy).toBeVec(v[0], v[3], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xwzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwzz", () => {
    it("should return Vec4(x, w, z, z)", () => {
      expect(v.xwzz).toBeVec(v[0], v[3], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xwzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwzw", () => {
    it("should return Vec4(x, w, z, w)", () => {
      expect(v.xwzw).toBeVec(v[0], v[3], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xwzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwwx", () => {
    it("should return Vec4(x, w, w, x)", () => {
      expect(v.xwwx).toBeVec(v[0], v[3], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.xwwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwwy", () => {
    it("should return Vec4(x, w, w, y)", () => {
      expect(v.xwwy).toBeVec(v[0], v[3], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.xwwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwwz", () => {
    it("should return Vec4(x, w, w, z)", () => {
      expect(v.xwwz).toBeVec(v[0], v[3], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.xwwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().xwww", () => {
    it("should return Vec4(x, w, w, w)", () => {
      expect(v.xwww).toBeVec(v[0], v[3], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.xwww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxxx", () => {
    it("should return Vec4(y, x, x, x)", () => {
      expect(v.yxxx).toBeVec(v[1], v[0], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yxxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxxy", () => {
    it("should return Vec4(y, x, x, y)", () => {
      expect(v.yxxy).toBeVec(v[1], v[0], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yxxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxxz", () => {
    it("should return Vec4(y, x, x, z)", () => {
      expect(v.yxxz).toBeVec(v[1], v[0], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yxxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxxw", () => {
    it("should return Vec4(y, x, x, w)", () => {
      expect(v.yxxw).toBeVec(v[1], v[0], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yxxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxyx", () => {
    it("should return Vec4(y, x, y, x)", () => {
      expect(v.yxyx).toBeVec(v[1], v[0], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yxyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxyy", () => {
    it("should return Vec4(y, x, y, y)", () => {
      expect(v.yxyy).toBeVec(v[1], v[0], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yxyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxyz", () => {
    it("should return Vec4(y, x, y, z)", () => {
      expect(v.yxyz).toBeVec(v[1], v[0], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yxyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxyw", () => {
    it("should return Vec4(y, x, y, w)", () => {
      expect(v.yxyw).toBeVec(v[1], v[0], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yxyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxzx", () => {
    it("should return Vec4(y, x, z, x)", () => {
      expect(v.yxzx).toBeVec(v[1], v[0], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yxzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxzy", () => {
    it("should return Vec4(y, x, z, y)", () => {
      expect(v.yxzy).toBeVec(v[1], v[0], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yxzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxzz", () => {
    it("should return Vec4(y, x, z, z)", () => {
      expect(v.yxzz).toBeVec(v[1], v[0], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yxzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxzw", () => {
    it("should return Vec4(y, x, z, w)", () => {
      expect(v.yxzw).toBeVec(v[1], v[0], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yxzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxwx", () => {
    it("should return Vec4(y, x, w, x)", () => {
      expect(v.yxwx).toBeVec(v[1], v[0], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yxwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxwy", () => {
    it("should return Vec4(y, x, w, y)", () => {
      expect(v.yxwy).toBeVec(v[1], v[0], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yxwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxwz", () => {
    it("should return Vec4(y, x, w, z)", () => {
      expect(v.yxwz).toBeVec(v[1], v[0], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yxwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yxww", () => {
    it("should return Vec4(y, x, w, w)", () => {
      expect(v.yxww).toBeVec(v[1], v[0], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yxww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyxx", () => {
    it("should return Vec4(y, y, x, x)", () => {
      expect(v.yyxx).toBeVec(v[1], v[1], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yyxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyxy", () => {
    it("should return Vec4(y, y, x, y)", () => {
      expect(v.yyxy).toBeVec(v[1], v[1], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yyxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyxz", () => {
    it("should return Vec4(y, y, x, z)", () => {
      expect(v.yyxz).toBeVec(v[1], v[1], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yyxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyxw", () => {
    it("should return Vec4(y, y, x, w)", () => {
      expect(v.yyxw).toBeVec(v[1], v[1], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yyxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyyx", () => {
    it("should return Vec4(y, y, y, x)", () => {
      expect(v.yyyx).toBeVec(v[1], v[1], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yyyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyyy", () => {
    it("should return Vec4(y, y, y, y)", () => {
      expect(v.yyyy).toBeVec(v[1], v[1], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yyyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyyz", () => {
    it("should return Vec4(y, y, y, z)", () => {
      expect(v.yyyz).toBeVec(v[1], v[1], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yyyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyyw", () => {
    it("should return Vec4(y, y, y, w)", () => {
      expect(v.yyyw).toBeVec(v[1], v[1], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yyyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyzx", () => {
    it("should return Vec4(y, y, z, x)", () => {
      expect(v.yyzx).toBeVec(v[1], v[1], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yyzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyzy", () => {
    it("should return Vec4(y, y, z, y)", () => {
      expect(v.yyzy).toBeVec(v[1], v[1], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yyzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyzz", () => {
    it("should return Vec4(y, y, z, z)", () => {
      expect(v.yyzz).toBeVec(v[1], v[1], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yyzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyzw", () => {
    it("should return Vec4(y, y, z, w)", () => {
      expect(v.yyzw).toBeVec(v[1], v[1], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yyzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yywx", () => {
    it("should return Vec4(y, y, w, x)", () => {
      expect(v.yywx).toBeVec(v[1], v[1], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yywx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yywy", () => {
    it("should return Vec4(y, y, w, y)", () => {
      expect(v.yywy).toBeVec(v[1], v[1], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yywy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yywz", () => {
    it("should return Vec4(y, y, w, z)", () => {
      expect(v.yywz).toBeVec(v[1], v[1], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yywz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yyww", () => {
    it("should return Vec4(y, y, w, w)", () => {
      expect(v.yyww).toBeVec(v[1], v[1], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yyww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzxx", () => {
    it("should return Vec4(y, z, x, x)", () => {
      expect(v.yzxx).toBeVec(v[1], v[2], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yzxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzxy", () => {
    it("should return Vec4(y, z, x, y)", () => {
      expect(v.yzxy).toBeVec(v[1], v[2], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yzxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzxz", () => {
    it("should return Vec4(y, z, x, z)", () => {
      expect(v.yzxz).toBeVec(v[1], v[2], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yzxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzxw", () => {
    it("should return Vec4(y, z, x, w)", () => {
      expect(v.yzxw).toBeVec(v[1], v[2], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yzxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzyx", () => {
    it("should return Vec4(y, z, y, x)", () => {
      expect(v.yzyx).toBeVec(v[1], v[2], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yzyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzyy", () => {
    it("should return Vec4(y, z, y, y)", () => {
      expect(v.yzyy).toBeVec(v[1], v[2], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yzyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzyz", () => {
    it("should return Vec4(y, z, y, z)", () => {
      expect(v.yzyz).toBeVec(v[1], v[2], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yzyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzyw", () => {
    it("should return Vec4(y, z, y, w)", () => {
      expect(v.yzyw).toBeVec(v[1], v[2], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yzyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzzx", () => {
    it("should return Vec4(y, z, z, x)", () => {
      expect(v.yzzx).toBeVec(v[1], v[2], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yzzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzzy", () => {
    it("should return Vec4(y, z, z, y)", () => {
      expect(v.yzzy).toBeVec(v[1], v[2], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yzzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzzz", () => {
    it("should return Vec4(y, z, z, z)", () => {
      expect(v.yzzz).toBeVec(v[1], v[2], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yzzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzzw", () => {
    it("should return Vec4(y, z, z, w)", () => {
      expect(v.yzzw).toBeVec(v[1], v[2], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yzzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzwx", () => {
    it("should return Vec4(y, z, w, x)", () => {
      expect(v.yzwx).toBeVec(v[1], v[2], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.yzwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzwy", () => {
    it("should return Vec4(y, z, w, y)", () => {
      expect(v.yzwy).toBeVec(v[1], v[2], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.yzwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzwz", () => {
    it("should return Vec4(y, z, w, z)", () => {
      expect(v.yzwz).toBeVec(v[1], v[2], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.yzwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().yzww", () => {
    it("should return Vec4(y, z, w, w)", () => {
      expect(v.yzww).toBeVec(v[1], v[2], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.yzww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywxx", () => {
    it("should return Vec4(y, w, x, x)", () => {
      expect(v.ywxx).toBeVec(v[1], v[3], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.ywxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywxy", () => {
    it("should return Vec4(y, w, x, y)", () => {
      expect(v.ywxy).toBeVec(v[1], v[3], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.ywxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywxz", () => {
    it("should return Vec4(y, w, x, z)", () => {
      expect(v.ywxz).toBeVec(v[1], v[3], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.ywxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywxw", () => {
    it("should return Vec4(y, w, x, w)", () => {
      expect(v.ywxw).toBeVec(v[1], v[3], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.ywxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywyx", () => {
    it("should return Vec4(y, w, y, x)", () => {
      expect(v.ywyx).toBeVec(v[1], v[3], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.ywyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywyy", () => {
    it("should return Vec4(y, w, y, y)", () => {
      expect(v.ywyy).toBeVec(v[1], v[3], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.ywyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywyz", () => {
    it("should return Vec4(y, w, y, z)", () => {
      expect(v.ywyz).toBeVec(v[1], v[3], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.ywyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywyw", () => {
    it("should return Vec4(y, w, y, w)", () => {
      expect(v.ywyw).toBeVec(v[1], v[3], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.ywyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywzx", () => {
    it("should return Vec4(y, w, z, x)", () => {
      expect(v.ywzx).toBeVec(v[1], v[3], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.ywzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywzy", () => {
    it("should return Vec4(y, w, z, y)", () => {
      expect(v.ywzy).toBeVec(v[1], v[3], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.ywzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywzz", () => {
    it("should return Vec4(y, w, z, z)", () => {
      expect(v.ywzz).toBeVec(v[1], v[3], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.ywzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywzw", () => {
    it("should return Vec4(y, w, z, w)", () => {
      expect(v.ywzw).toBeVec(v[1], v[3], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.ywzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywwx", () => {
    it("should return Vec4(y, w, w, x)", () => {
      expect(v.ywwx).toBeVec(v[1], v[3], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.ywwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywwy", () => {
    it("should return Vec4(y, w, w, y)", () => {
      expect(v.ywwy).toBeVec(v[1], v[3], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.ywwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywwz", () => {
    it("should return Vec4(y, w, w, z)", () => {
      expect(v.ywwz).toBeVec(v[1], v[3], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.ywwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().ywww", () => {
    it("should return Vec4(y, w, w, w)", () => {
      expect(v.ywww).toBeVec(v[1], v[3], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.ywww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxxx", () => {
    it("should return Vec4(z, x, x, x)", () => {
      expect(v.zxxx).toBeVec(v[2], v[0], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zxxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxxy", () => {
    it("should return Vec4(z, x, x, y)", () => {
      expect(v.zxxy).toBeVec(v[2], v[0], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zxxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxxz", () => {
    it("should return Vec4(z, x, x, z)", () => {
      expect(v.zxxz).toBeVec(v[2], v[0], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zxxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxxw", () => {
    it("should return Vec4(z, x, x, w)", () => {
      expect(v.zxxw).toBeVec(v[2], v[0], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zxxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxyx", () => {
    it("should return Vec4(z, x, y, x)", () => {
      expect(v.zxyx).toBeVec(v[2], v[0], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zxyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxyy", () => {
    it("should return Vec4(z, x, y, y)", () => {
      expect(v.zxyy).toBeVec(v[2], v[0], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zxyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxyz", () => {
    it("should return Vec4(z, x, y, z)", () => {
      expect(v.zxyz).toBeVec(v[2], v[0], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zxyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxyw", () => {
    it("should return Vec4(z, x, y, w)", () => {
      expect(v.zxyw).toBeVec(v[2], v[0], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zxyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxzx", () => {
    it("should return Vec4(z, x, z, x)", () => {
      expect(v.zxzx).toBeVec(v[2], v[0], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zxzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxzy", () => {
    it("should return Vec4(z, x, z, y)", () => {
      expect(v.zxzy).toBeVec(v[2], v[0], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zxzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxzz", () => {
    it("should return Vec4(z, x, z, z)", () => {
      expect(v.zxzz).toBeVec(v[2], v[0], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zxzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxzw", () => {
    it("should return Vec4(z, x, z, w)", () => {
      expect(v.zxzw).toBeVec(v[2], v[0], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zxzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxwx", () => {
    it("should return Vec4(z, x, w, x)", () => {
      expect(v.zxwx).toBeVec(v[2], v[0], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zxwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxwy", () => {
    it("should return Vec4(z, x, w, y)", () => {
      expect(v.zxwy).toBeVec(v[2], v[0], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zxwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxwz", () => {
    it("should return Vec4(z, x, w, z)", () => {
      expect(v.zxwz).toBeVec(v[2], v[0], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zxwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zxww", () => {
    it("should return Vec4(z, x, w, w)", () => {
      expect(v.zxww).toBeVec(v[2], v[0], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zxww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyxx", () => {
    it("should return Vec4(z, y, x, x)", () => {
      expect(v.zyxx).toBeVec(v[2], v[1], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zyxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyxy", () => {
    it("should return Vec4(z, y, x, y)", () => {
      expect(v.zyxy).toBeVec(v[2], v[1], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zyxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyxz", () => {
    it("should return Vec4(z, y, x, z)", () => {
      expect(v.zyxz).toBeVec(v[2], v[1], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zyxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyxw", () => {
    it("should return Vec4(z, y, x, w)", () => {
      expect(v.zyxw).toBeVec(v[2], v[1], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zyxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyyx", () => {
    it("should return Vec4(z, y, y, x)", () => {
      expect(v.zyyx).toBeVec(v[2], v[1], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zyyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyyy", () => {
    it("should return Vec4(z, y, y, y)", () => {
      expect(v.zyyy).toBeVec(v[2], v[1], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zyyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyyz", () => {
    it("should return Vec4(z, y, y, z)", () => {
      expect(v.zyyz).toBeVec(v[2], v[1], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zyyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyyw", () => {
    it("should return Vec4(z, y, y, w)", () => {
      expect(v.zyyw).toBeVec(v[2], v[1], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zyyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyzx", () => {
    it("should return Vec4(z, y, z, x)", () => {
      expect(v.zyzx).toBeVec(v[2], v[1], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zyzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyzy", () => {
    it("should return Vec4(z, y, z, y)", () => {
      expect(v.zyzy).toBeVec(v[2], v[1], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zyzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyzz", () => {
    it("should return Vec4(z, y, z, z)", () => {
      expect(v.zyzz).toBeVec(v[2], v[1], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zyzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyzw", () => {
    it("should return Vec4(z, y, z, w)", () => {
      expect(v.zyzw).toBeVec(v[2], v[1], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zyzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zywx", () => {
    it("should return Vec4(z, y, w, x)", () => {
      expect(v.zywx).toBeVec(v[2], v[1], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zywx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zywy", () => {
    it("should return Vec4(z, y, w, y)", () => {
      expect(v.zywy).toBeVec(v[2], v[1], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zywy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zywz", () => {
    it("should return Vec4(z, y, w, z)", () => {
      expect(v.zywz).toBeVec(v[2], v[1], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zywz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zyww", () => {
    it("should return Vec4(z, y, w, w)", () => {
      expect(v.zyww).toBeVec(v[2], v[1], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zyww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzxx", () => {
    it("should return Vec4(z, z, x, x)", () => {
      expect(v.zzxx).toBeVec(v[2], v[2], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zzxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzxy", () => {
    it("should return Vec4(z, z, x, y)", () => {
      expect(v.zzxy).toBeVec(v[2], v[2], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zzxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzxz", () => {
    it("should return Vec4(z, z, x, z)", () => {
      expect(v.zzxz).toBeVec(v[2], v[2], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zzxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzxw", () => {
    it("should return Vec4(z, z, x, w)", () => {
      expect(v.zzxw).toBeVec(v[2], v[2], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zzxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzyx", () => {
    it("should return Vec4(z, z, y, x)", () => {
      expect(v.zzyx).toBeVec(v[2], v[2], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zzyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzyy", () => {
    it("should return Vec4(z, z, y, y)", () => {
      expect(v.zzyy).toBeVec(v[2], v[2], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zzyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzyz", () => {
    it("should return Vec4(z, z, y, z)", () => {
      expect(v.zzyz).toBeVec(v[2], v[2], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zzyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzyw", () => {
    it("should return Vec4(z, z, y, w)", () => {
      expect(v.zzyw).toBeVec(v[2], v[2], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zzyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzzx", () => {
    it("should return Vec4(z, z, z, x)", () => {
      expect(v.zzzx).toBeVec(v[2], v[2], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zzzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzzy", () => {
    it("should return Vec4(z, z, z, y)", () => {
      expect(v.zzzy).toBeVec(v[2], v[2], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zzzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzzz", () => {
    it("should return Vec4(z, z, z, z)", () => {
      expect(v.zzzz).toBeVec(v[2], v[2], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zzzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzzw", () => {
    it("should return Vec4(z, z, z, w)", () => {
      expect(v.zzzw).toBeVec(v[2], v[2], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zzzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzwx", () => {
    it("should return Vec4(z, z, w, x)", () => {
      expect(v.zzwx).toBeVec(v[2], v[2], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zzwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzwy", () => {
    it("should return Vec4(z, z, w, y)", () => {
      expect(v.zzwy).toBeVec(v[2], v[2], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zzwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzwz", () => {
    it("should return Vec4(z, z, w, z)", () => {
      expect(v.zzwz).toBeVec(v[2], v[2], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zzwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zzww", () => {
    it("should return Vec4(z, z, w, w)", () => {
      expect(v.zzww).toBeVec(v[2], v[2], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zzww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwxx", () => {
    it("should return Vec4(z, w, x, x)", () => {
      expect(v.zwxx).toBeVec(v[2], v[3], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zwxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwxy", () => {
    it("should return Vec4(z, w, x, y)", () => {
      expect(v.zwxy).toBeVec(v[2], v[3], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zwxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwxz", () => {
    it("should return Vec4(z, w, x, z)", () => {
      expect(v.zwxz).toBeVec(v[2], v[3], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zwxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwxw", () => {
    it("should return Vec4(z, w, x, w)", () => {
      expect(v.zwxw).toBeVec(v[2], v[3], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zwxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwyx", () => {
    it("should return Vec4(z, w, y, x)", () => {
      expect(v.zwyx).toBeVec(v[2], v[3], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zwyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwyy", () => {
    it("should return Vec4(z, w, y, y)", () => {
      expect(v.zwyy).toBeVec(v[2], v[3], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zwyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwyz", () => {
    it("should return Vec4(z, w, y, z)", () => {
      expect(v.zwyz).toBeVec(v[2], v[3], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zwyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwyw", () => {
    it("should return Vec4(z, w, y, w)", () => {
      expect(v.zwyw).toBeVec(v[2], v[3], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zwyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwzx", () => {
    it("should return Vec4(z, w, z, x)", () => {
      expect(v.zwzx).toBeVec(v[2], v[3], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zwzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwzy", () => {
    it("should return Vec4(z, w, z, y)", () => {
      expect(v.zwzy).toBeVec(v[2], v[3], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zwzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwzz", () => {
    it("should return Vec4(z, w, z, z)", () => {
      expect(v.zwzz).toBeVec(v[2], v[3], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zwzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwzw", () => {
    it("should return Vec4(z, w, z, w)", () => {
      expect(v.zwzw).toBeVec(v[2], v[3], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zwzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwwx", () => {
    it("should return Vec4(z, w, w, x)", () => {
      expect(v.zwwx).toBeVec(v[2], v[3], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.zwwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwwy", () => {
    it("should return Vec4(z, w, w, y)", () => {
      expect(v.zwwy).toBeVec(v[2], v[3], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.zwwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwwz", () => {
    it("should return Vec4(z, w, w, z)", () => {
      expect(v.zwwz).toBeVec(v[2], v[3], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.zwwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().zwww", () => {
    it("should return Vec4(z, w, w, w)", () => {
      expect(v.zwww).toBeVec(v[2], v[3], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.zwww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxxx", () => {
    it("should return Vec4(w, x, x, x)", () => {
      expect(v.wxxx).toBeVec(v[3], v[0], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wxxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxxy", () => {
    it("should return Vec4(w, x, x, y)", () => {
      expect(v.wxxy).toBeVec(v[3], v[0], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wxxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxxz", () => {
    it("should return Vec4(w, x, x, z)", () => {
      expect(v.wxxz).toBeVec(v[3], v[0], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wxxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxxw", () => {
    it("should return Vec4(w, x, x, w)", () => {
      expect(v.wxxw).toBeVec(v[3], v[0], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wxxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxyx", () => {
    it("should return Vec4(w, x, y, x)", () => {
      expect(v.wxyx).toBeVec(v[3], v[0], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wxyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxyy", () => {
    it("should return Vec4(w, x, y, y)", () => {
      expect(v.wxyy).toBeVec(v[3], v[0], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wxyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxyz", () => {
    it("should return Vec4(w, x, y, z)", () => {
      expect(v.wxyz).toBeVec(v[3], v[0], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wxyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxyw", () => {
    it("should return Vec4(w, x, y, w)", () => {
      expect(v.wxyw).toBeVec(v[3], v[0], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wxyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxzx", () => {
    it("should return Vec4(w, x, z, x)", () => {
      expect(v.wxzx).toBeVec(v[3], v[0], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wxzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxzy", () => {
    it("should return Vec4(w, x, z, y)", () => {
      expect(v.wxzy).toBeVec(v[3], v[0], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wxzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxzz", () => {
    it("should return Vec4(w, x, z, z)", () => {
      expect(v.wxzz).toBeVec(v[3], v[0], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wxzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxzw", () => {
    it("should return Vec4(w, x, z, w)", () => {
      expect(v.wxzw).toBeVec(v[3], v[0], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wxzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxwx", () => {
    it("should return Vec4(w, x, w, x)", () => {
      expect(v.wxwx).toBeVec(v[3], v[0], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wxwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxwy", () => {
    it("should return Vec4(w, x, w, y)", () => {
      expect(v.wxwy).toBeVec(v[3], v[0], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wxwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxwz", () => {
    it("should return Vec4(w, x, w, z)", () => {
      expect(v.wxwz).toBeVec(v[3], v[0], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wxwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wxww", () => {
    it("should return Vec4(w, x, w, w)", () => {
      expect(v.wxww).toBeVec(v[3], v[0], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wxww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyxx", () => {
    it("should return Vec4(w, y, x, x)", () => {
      expect(v.wyxx).toBeVec(v[3], v[1], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wyxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyxy", () => {
    it("should return Vec4(w, y, x, y)", () => {
      expect(v.wyxy).toBeVec(v[3], v[1], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wyxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyxz", () => {
    it("should return Vec4(w, y, x, z)", () => {
      expect(v.wyxz).toBeVec(v[3], v[1], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wyxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyxw", () => {
    it("should return Vec4(w, y, x, w)", () => {
      expect(v.wyxw).toBeVec(v[3], v[1], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wyxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyyx", () => {
    it("should return Vec4(w, y, y, x)", () => {
      expect(v.wyyx).toBeVec(v[3], v[1], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wyyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyyy", () => {
    it("should return Vec4(w, y, y, y)", () => {
      expect(v.wyyy).toBeVec(v[3], v[1], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wyyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyyz", () => {
    it("should return Vec4(w, y, y, z)", () => {
      expect(v.wyyz).toBeVec(v[3], v[1], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wyyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyyw", () => {
    it("should return Vec4(w, y, y, w)", () => {
      expect(v.wyyw).toBeVec(v[3], v[1], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wyyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyzx", () => {
    it("should return Vec4(w, y, z, x)", () => {
      expect(v.wyzx).toBeVec(v[3], v[1], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wyzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyzy", () => {
    it("should return Vec4(w, y, z, y)", () => {
      expect(v.wyzy).toBeVec(v[3], v[1], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wyzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyzz", () => {
    it("should return Vec4(w, y, z, z)", () => {
      expect(v.wyzz).toBeVec(v[3], v[1], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wyzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyzw", () => {
    it("should return Vec4(w, y, z, w)", () => {
      expect(v.wyzw).toBeVec(v[3], v[1], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wyzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wywx", () => {
    it("should return Vec4(w, y, w, x)", () => {
      expect(v.wywx).toBeVec(v[3], v[1], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wywx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wywy", () => {
    it("should return Vec4(w, y, w, y)", () => {
      expect(v.wywy).toBeVec(v[3], v[1], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wywy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wywz", () => {
    it("should return Vec4(w, y, w, z)", () => {
      expect(v.wywz).toBeVec(v[3], v[1], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wywz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wyww", () => {
    it("should return Vec4(w, y, w, w)", () => {
      expect(v.wyww).toBeVec(v[3], v[1], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wyww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzxx", () => {
    it("should return Vec4(w, z, x, x)", () => {
      expect(v.wzxx).toBeVec(v[3], v[2], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wzxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzxy", () => {
    it("should return Vec4(w, z, x, y)", () => {
      expect(v.wzxy).toBeVec(v[3], v[2], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wzxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzxz", () => {
    it("should return Vec4(w, z, x, z)", () => {
      expect(v.wzxz).toBeVec(v[3], v[2], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wzxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzxw", () => {
    it("should return Vec4(w, z, x, w)", () => {
      expect(v.wzxw).toBeVec(v[3], v[2], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wzxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzyx", () => {
    it("should return Vec4(w, z, y, x)", () => {
      expect(v.wzyx).toBeVec(v[3], v[2], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wzyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzyy", () => {
    it("should return Vec4(w, z, y, y)", () => {
      expect(v.wzyy).toBeVec(v[3], v[2], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wzyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzyz", () => {
    it("should return Vec4(w, z, y, z)", () => {
      expect(v.wzyz).toBeVec(v[3], v[2], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wzyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzyw", () => {
    it("should return Vec4(w, z, y, w)", () => {
      expect(v.wzyw).toBeVec(v[3], v[2], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wzyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzzx", () => {
    it("should return Vec4(w, z, z, x)", () => {
      expect(v.wzzx).toBeVec(v[3], v[2], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wzzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzzy", () => {
    it("should return Vec4(w, z, z, y)", () => {
      expect(v.wzzy).toBeVec(v[3], v[2], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wzzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzzz", () => {
    it("should return Vec4(w, z, z, z)", () => {
      expect(v.wzzz).toBeVec(v[3], v[2], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wzzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzzw", () => {
    it("should return Vec4(w, z, z, w)", () => {
      expect(v.wzzw).toBeVec(v[3], v[2], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wzzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzwx", () => {
    it("should return Vec4(w, z, w, x)", () => {
      expect(v.wzwx).toBeVec(v[3], v[2], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wzwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzwy", () => {
    it("should return Vec4(w, z, w, y)", () => {
      expect(v.wzwy).toBeVec(v[3], v[2], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wzwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzwz", () => {
    it("should return Vec4(w, z, w, z)", () => {
      expect(v.wzwz).toBeVec(v[3], v[2], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wzwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wzww", () => {
    it("should return Vec4(w, z, w, w)", () => {
      expect(v.wzww).toBeVec(v[3], v[2], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wzww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwxx", () => {
    it("should return Vec4(w, w, x, x)", () => {
      expect(v.wwxx).toBeVec(v[3], v[3], v[0], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wwxx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwxy", () => {
    it("should return Vec4(w, w, x, y)", () => {
      expect(v.wwxy).toBeVec(v[3], v[3], v[0], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wwxy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwxz", () => {
    it("should return Vec4(w, w, x, z)", () => {
      expect(v.wwxz).toBeVec(v[3], v[3], v[0], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wwxz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwxw", () => {
    it("should return Vec4(w, w, x, w)", () => {
      expect(v.wwxw).toBeVec(v[3], v[3], v[0], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wwxw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwyx", () => {
    it("should return Vec4(w, w, y, x)", () => {
      expect(v.wwyx).toBeVec(v[3], v[3], v[1], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wwyx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwyy", () => {
    it("should return Vec4(w, w, y, y)", () => {
      expect(v.wwyy).toBeVec(v[3], v[3], v[1], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wwyy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwyz", () => {
    it("should return Vec4(w, w, y, z)", () => {
      expect(v.wwyz).toBeVec(v[3], v[3], v[1], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wwyz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwyw", () => {
    it("should return Vec4(w, w, y, w)", () => {
      expect(v.wwyw).toBeVec(v[3], v[3], v[1], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wwyw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwzx", () => {
    it("should return Vec4(w, w, z, x)", () => {
      expect(v.wwzx).toBeVec(v[3], v[3], v[2], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wwzx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwzy", () => {
    it("should return Vec4(w, w, z, y)", () => {
      expect(v.wwzy).toBeVec(v[3], v[3], v[2], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wwzy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwzz", () => {
    it("should return Vec4(w, w, z, z)", () => {
      expect(v.wwzz).toBeVec(v[3], v[3], v[2], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wwzz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwzw", () => {
    it("should return Vec4(w, w, z, w)", () => {
      expect(v.wwzw).toBeVec(v[3], v[3], v[2], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wwzw;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwwx", () => {
    it("should return Vec4(w, w, w, x)", () => {
      expect(v.wwwx).toBeVec(v[3], v[3], v[3], v[0]);
    });
    it("should be return a copy", () => {
      let sw = v.wwwx;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwwy", () => {
    it("should return Vec4(w, w, w, y)", () => {
      expect(v.wwwy).toBeVec(v[3], v[3], v[3], v[1]);
    });
    it("should be return a copy", () => {
      let sw = v.wwwy;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwwz", () => {
    it("should return Vec4(w, w, w, z)", () => {
      expect(v.wwwz).toBeVec(v[3], v[3], v[3], v[2]);
    });
    it("should be return a copy", () => {
      let sw = v.wwwz;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  describe("Vec4().wwww", () => {
    it("should return Vec4(w, w, w, w)", () => {
      expect(v.wwww).toBeVec(v[3], v[3], v[3], v[3]);
    });
    it("should be return a copy", () => {
      let sw = v.wwww;
      sw[0] += 1;
      expect(v[0]).not.toEqual(sw[0]);
    });
  });
    
  // [/Swizzle Autogen]
});